Q is made of multiple vital components.
The first part of it is Hyperbase.
The second part of it is http/server part. 
The third part is the backend version of visur
The fourth part is the web version of visur and then the cli version (maybe work on this in parallel)
Hyperbase is the first component we must finish, as it is required for visur.

Merging of the idea of application and database, and query engine into a single package. Splunk does the same thing.

CREATE, MODIFY and DELETE
Keeps the previous versions, never deletes things or modifies

Written in Java/vertx. Later we'll use VISUR to write it in Q/lemon

Every record has event type (create modify delete), record type (noun (table)), id

writing is super fast every database is 1 single file with sequential data. 
Files get memory mapped, if it gets too big then it gets broken up. If you have 1gb of ram and 8gb file this works well, because it loads chunks of the file into memory, to check if the current chunk contains the thing you're looking for. not the entire file.
Reading is the slowest process because this style favors writing, but it's made up for by the automated index and caching. 
No one will design any indexes, because it's all automatic based on what you use. Warming up data is a concept here.

git and prometheus are also storing a history. it stores all data across all time. Allows you to time travel and repeat events to find out what went wrong.
you can delete any part of the history you want. You can have automatic garbage collection which deletes history past 3 weeks if you want. Or you can wipe out all the history and preserve only the current state and future history.
The way garbage collectioni works is it looks for all modifies and delete and removes them as well as past thing they operated on, and keep only the latest version. turning some deletes and modifies into creates for the new database. Then you point users to the new database when it's ready.


The first record you make you must provide a type, then it creates a table of that type auto
first table is type 0 which all tables go inside
type ids exist

You wouldn't have to add logging tracing or metrics because all this data is stored for free 
all the records have timestamps in between.
indexes have summaries and they have event ids also
also summaries are inside indexes

event ids as well
you also have the benefit of having an omnicient debugger because we have a history of all things
but omnicient debugger will not work on low level stuff without additional program. we might have it as an option when you run your hyperbase application


Jerbil will still be nice for when I'm forced to use java and other languages. 


Database:
 - file manager (create and delete files and work with memory mapping files, decide where to store the actual files whether on disk or in memory, automatic backup system) 
     - It's gonna need to decide on a per-system basis where to store files, if it's linux then it will store files in a folder like /etc/visur_data/ or something like that.
 - query engine (Automatically generates queries for the user which communicates with file manager to create/delete files and records from files, this is java communicating with base machine to generate files)
 - cacher (handles creating indexes automatically based on what is used most, communicates with file manager to obtain index data to store in memory based on the queries that get used from the query engine)
 - StoreType (ENUM determines whether data is stored entirely in memory, or indexes only, or if data goes to blackhole entirely)
 - (TBD) Event Coordinator (If enabled this scrapes the database files once every 60 seconds and presents it in a format readable for certain observability components like prometheus, jaeger, and splunk etc..., kinda like a exporter) (NOTE: Ask jerm about this, because this would effectively double the storage usage of apps maybe instead of this we can just make our own observability interface that can read our database format without needing a conversion in between.)
 - (TBD) Generic Observability Interface (A generic interface that collects metrics, logs and traces by reading our database files directly and sending the data to a web UI for monitoring purposes and visualization)


Application situations: One action = one type affected and one CRUD operation.
Social media -> Delete all Users from admin  -> Query Factory generates a Query -> Record Maker converts query into formatted list of delete records -> File manager validates and appends that list to the "admin" database 
VISUR -> Delete all files ending in .txt -> action is performed by terminal since this part is using the terminal multiplexer part of VISUR.
DB Interface -> Update all records that match "[0-9].*" else delete -> Record Maker validates all existing metrics and creates 'delete all except modify records list' sends immediately to File manager -> File manager validates and appends the modifies and deletes to the database.


Arguements for/against Rust Vs. Java/vertx:
   	Java:								Rust:
More people know Java						But Rust is gaining popularity fast.


pros and cons of VIM vs Helix:
         HELIX:  									VIM:
selection -> verb model (Word select, Change)					verb -> selection model (Change Inside Word)
Written in old C programming language						Written in new Rust programming language
select entire file with % then s to search and replace/edit all at once		:%s/regex/replace/g is how to do search and replace in vim
Less configuration options right now.						Many configuration options, but fairly complex to use effectively
vgl is more keys to delete to end of line					d$ is 1 less keystroke to delete to end of line.
xd is same number of keys to delete current line				dd same number
]pd is same number of keys to delete a paragraph				dap same number
mip is same number of keys to select a paragraph				vip is same number, but you can also do dip which is one less keystroke to delete the paragraph
allows selecting inside almost any key pair with miKEY				limited to inside () or inside {} etc...
ALT-. repeats last motion							; repeats last motion
. repeats last action								. repeats last action
So far I think Helix uses less hotkeys than vim					VIM basically uses every available hotkey
Also you almost never have to hit the escape key  				Hitting ESC key constantly
minor annoyance, you have to move one letter or press ; to remove automatic selections before doing more selections (maybe there is an option to turn this off as soon as you hit 'v'
I like helixes ability to press ; to turn off current selection but stay in visual mode. In vim you have to hit escape then go back into visual mode again to try it again.
I like 0 , $ and ^ to go to beginning and end of lines more than helix version doing gl and gh, but maybe that's just bias
helix doesn't preserve selection when you use 'gb', but I think this is a bug, it should do that.
I like VIM V better than x for selecting an entire line, and x isn't even real selection mode, because if you try doing any more selections besides x it will not preserve the selection.
I like helix % for selecting entire document better than vim 'ggvG' and also it's easier for global search and replace. But I like vim ability to show results as you're typing and to highlight all instances, and turn off highlighting with SPACE.
I like helixes external files search by doing SPACE-/
helix has an option to (d)elete or (c)hange selection without overwriting the yanked clipboard registry. ALT+d or ALT+c
Helix is not as good as netrw when it comes to exploring the entire file system. It only lets you see current working directory.
Both vim and helix require compiling with +clipboard option in order to yank to system clipboard which is not default on most systems.
ALT-; will move cursor to other side of selection


